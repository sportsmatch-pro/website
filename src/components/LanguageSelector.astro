---
// Props per a l'idioma actual
export interface Props {
  currentLang?: string;
  currentSlug?: string; // Afegir slug de l'article actual
}

const { currentLang = "es-ES", currentSlug } = Astro.props;

// Mapeig d'idiomes per a les URLs
const langMap = {
  "es-ES": { code: "es", name: "ES", path: "", label: "Español" },
  "ca-ES": { code: "ca", name: "CA", path: "/ca", label: "Català" },
  en: { code: "en", name: "EN", path: "/en", label: "English" },
};

// Obtenir l'idioma actual
const currentLangInfo =
  langMap[currentLang as keyof typeof langMap] || langMap["es-ES"];

// Si estem en un article, obtenir els idiomes disponibles
let availableLanguages: string[] = [];
let translationSlugs: { [key: string]: string } = {};

if (currentSlug) {
  // Cridar l'API per obtenir l'article amb les seves traduccions
  try {
    const res = await fetch(
      import.meta.env.API_BASE_URL +
        `articles/slug/${currentSlug}?language=${currentLang}`
    );
    const data = await res.json();

    if (data.article && data.translations) {
      // L'idioma actual sempre està disponible
      availableLanguages.push(currentLang);
      translationSlugs[currentLang] = currentSlug;

      // Afegir els idiomes de les traduccions disponibles
      data.translations.forEach((translation: any) => {
        availableLanguages.push(translation.language);
        translationSlugs[translation.language] = translation.slug;
      });
    }
  } catch (error) {
    console.error("Error fetching article translations:", error);
    // Si hi ha error, mostrar tots els idiomes
    availableLanguages = Object.keys(langMap);
  }
} else {
  // Si no estem en un article, mostrar tots els idiomes
  availableLanguages = Object.keys(langMap);
}

// Detectar si estem en una pàgina legal i obtenir les rutes
let legalPageRoutes: { [key: string]: string } = {};
const currentPath = Astro.url.pathname;

if (
  currentPath.includes("/aviso-legal") ||
  currentPath.includes("/avis-legal") ||
  currentPath.includes("/legal")
) {
  // Pàgina d'Avís Legal
  legalPageRoutes = {
    "es-ES": "/aviso-legal",
    "ca-ES": "/ca/avis-legal",
    en: "/en/legal",
  };
} else if (
  currentPath.includes("/politica-de-privacitat") ||
  currentPath.includes("/privacy")
) {
  // Pàgina de Política de Privacitat
  legalPageRoutes = {
    "es-ES": "/politica-de-privacidad",
    "ca-ES": "/ca/politica-de-privacitat",
    en: "/en/privacy-policy",
  };
}
---

<select
  class="border rounded-full px-4 py-1"
  id="language-selector"
  data-current-lang={currentLang}
  data-current-slug={currentSlug}
  data-translation-slugs={JSON.stringify(translationSlugs)}
  data-legal-page-routes={JSON.stringify(legalPageRoutes)}
>
  {
    Object.entries(langMap).map(([key, lang]) => {
      const isAvailable = availableLanguages.includes(key);
      const isCurrent = key === currentLang;

      return (
        <option
          value={lang.path}
          selected={isCurrent}
          disabled={!isAvailable}
          class={!isAvailable ? "text-gray-400" : ""}
        >
          {lang.name} {!isAvailable ? "(No disponible)" : ""}
        </option>
      );
    })
  }
</select>

<script>
  // Funcionalitat del selector d'idioma
  const languageSelector = document.getElementById(
    "language-selector"
  ) as HTMLSelectElement;
  const currentSlug = languageSelector?.dataset.currentSlug;

  // Obtenir els slugs de traducció des del servidor
  const translationSlugs = JSON.parse(
    languageSelector?.dataset.translationSlugs || "{}"
  );

  // Obtenir les rutes de pàgines legals des del servidor
  const legalPageRoutes = JSON.parse(
    languageSelector?.dataset.legalPageRoutes || "{}"
  );

  // Funció helper per obtenir el codi complet de l'idioma
  function getFullLanguageCode(shortLang: string): string {
    switch (shortLang) {
      case "es":
        return "es-ES";
      case "ca":
        return "ca-ES";
      case "en":
        return "en";
      default:
        return shortLang;
    }
  }

  if (languageSelector) {
    languageSelector.addEventListener("change", (e) => {
      const target = e.target as HTMLSelectElement;
      const newPath = target.value;
      const newLang = target.options[target.selectedIndex].text
        .split(" ")[0]
        .toLowerCase();

      // Si estem en un article, intentar navegar a la traducció
      if (currentSlug) {
        // Obtenir l'idioma complet del nou idioma seleccionat
        const newLangFull = getFullLanguageCode(newLang);

        // Buscar si tenim el slug per a aquest idioma
        if (translationSlugs[newLangFull]) {
          // Navegar directament a la traducció
          let newUrl;
          if (newPath) {
            newUrl = newPath + "/blog/" + translationSlugs[newLangFull];
          } else {
            newUrl = "/blog/" + translationSlugs[newLangFull];
          }
          window.location.href = newUrl;
          return;
        }

        // Si no hi ha traducció, fallback a la lògica anterior
        fallbackNavigation(newPath);
      } else if (Object.keys(legalPageRoutes).length > 0) {
        // Si estem en una pàgina legal, navegar a la traducció
        const newLangFull = getFullLanguageCode(newLang);
        const targetRoute = legalPageRoutes[newLangFull];

        if (targetRoute) {
          window.location.href = targetRoute;
          return;
        }

        // Si no hi ha ruta per a aquest idioma, fallback
        fallbackNavigation(newPath);
      } else {
        // Si no estem en un article ni en una pàgina legal, usar la lògica normal
        fallbackNavigation(newPath);
      }
    });
  }

  function fallbackNavigation(newPath: string) {
    // Obtenir la ruta actual
    const currentPath = window.location.pathname;

    // Separar la ruta en segments
    const segments = currentPath.split("/").filter((segment) => segment);

    // Si la ruta comença amb idioma, l'eliminem
    if (segments[0] === "ca" || segments[0] === "en") {
      segments.shift();
    }

    // Construir la nova ruta
    let newUrl;
    if (newPath) {
      // Afegir el nou idioma al principi
      newUrl = newPath + "/" + segments.join("/");
    } else {
      // Sense idioma (espanyol)
      newUrl = "/" + segments.join("/");
    }

    // Assegurar-nos que comença amb /
    if (!newUrl.startsWith("/")) {
      newUrl = "/" + newUrl;
    }

    // Redirigir
    window.location.href = newUrl;
  }
</script>
